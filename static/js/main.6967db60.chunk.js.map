{"version":3,"sources":["components/Wrapper/index.js","components/Navbar/index.js","components/Header/index.js","components/CardContainer/index.js","components/CharacterCard/index.js","components/Footer/index.js","App.js","serviceWorker.js","index.js"],"names":["Wrapper","props","react_default","a","createElement","className","children","Navbar","label","score","topScore","Header","CardContainer","CharacterCard","alt","name","src","image","onClick","id","Footer","App","state","characters","hasBeenClicked","handleClick","_this$state","_this","newScore","newTopScore","length","resetGame","includes","push","setState","console","log","shuffleCards","cast","i","j","Math","floor","random","_ref","_this2","this","components_Wrapper","components_Navbar","components_Header","components_CardContainer","map","character","components_CharacterCard","key","components_Footer","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6967db60.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\nfunction Wrapper(props) {\n  return <div className=\"wrapper\">{props.children}</div>;\n}\n\nexport default Wrapper;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Navbar (props) {\n\n    return (\n      <nav className=\"navbar\">\n        <ul>\n          <li className=\"title\">PEEP SHOW</li>\n          <li>{props.label}</li>\n          <li>\n            Score: {props.score}  |  Top Score: {props.topScore}\n          </li>\n        </ul>\n      </nav>\n    );\n  }\nexport default Navbar;\n","import React from \"react\";\n\nfunction Header (props) {\n  return ( <div className =\"header\">\n      <h1>Hooray! It's A Memory Game!</h1>\n      <h4>Click on a character to earn points, but don't click on any more than once!</h4>\n      </div>\n  )\n}\n\nexport default Header;\n","import React from \"react\";\nimport \"./style.css\";\n\n\n\nfunction CardContainer(props) {\n   \n    return (\n        <div className=\"cards\">\n        <div className=\"container mt-3\">\n          <div className=\"row justify-content-center\">\n                {props.children}\n        </div>\n        <div className=\"w-100 d-none d-md-block\"></div>\n        </div>\n        </div>\n    )\n}\n\nexport default CardContainer;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction CharacterCard(props) {\n  return (\n\n    \n    <div>\n      <div className=\"col-sm-3\">\n        <div className=\"character\">\n          <img alt={props.name} src={props.image} onClick={() => props.onClick(props.id)} />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default CharacterCard;\n","import React from \"react\";\n\nfunction Footer() {\n  return (\n    <div>\n      <footer className=\"footer\">\n      <div className=\"caption\">Watch all 9 series out now!</div></footer>\n    </div>\n  );\n}\n\nexport default Footer;\n","import React, { Component } from \"react\";\nimport Wrapper from \"./components/Wrapper\";\nimport Navbar from \"./components/Navbar\";\nimport Header from \"./components/Header\";\nimport CardContainer from \"./components/CardContainer\";\nimport \"./App.css\";\nimport characters from \"./characters.json\";\nimport CharacterCard from \"./components/CharacterCard\";\nimport Footer from './components/Footer'\n\nclass App extends Component {\n  state = {\n    characters,\n    label: \"Click an image to begin!\",\n    score: 0,\n    topScore: 0,\n    hasBeenClicked: []\n  };\n\n  handleClick = id => {\n    const { hasBeenClicked, topScore, score } = this.state;\n    const newScore = score + 1;\n    const newTopScore = newScore > topScore ? newScore : topScore;\n\n    if (hasBeenClicked.length === 12) {\n      this.resetGame();\n    } else if (hasBeenClicked.includes(id)) {\n      this.resetGame();\n    } else {\n      hasBeenClicked.push(id);\n      this.setState({ hasBeenClicked, score: newScore, topScore: newTopScore});\n      console.log(this.state.hasBeenClicked);\n      console.log(\"clicked #\", id);\n      this.shuffleCards();\n    }\n  };\n\n  resetGame = () => {\n    this.shuffleCards();\n    this.setState({ hasBeenClicked: [], score: 0 });\n  };\n\n  // winGame = () => {\n  //   this.shuffleCards();\n  //   this.setState({ hasBeenClicked: [], score: 0 });\n  // };\n\n  shuffleCards = () => {\n    const cast = this.state.characters;\n\n    for (let i = cast.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [cast[i], cast[j]] = [cast[j], cast[i]];\n    }\n    this.setState({ characters: cast });\n  };\n\n  render() {\n    return (\n      <Wrapper>\n        <Navbar\n          score={this.state.score}\n          topScore={this.state.topScore}\n          label={this.state.label}\n        />\n        <Header />\n        <CardContainer>\n          {this.state.characters.map(character => (\n            <CharacterCard\n              id={character.id}\n              name={character.name}\n              key={character.name}\n              image={character.image}\n              onClick={this.handleClick}\n            />\n          ))}\n        </CardContainer>\n        <Footer />\n      </Wrapper>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}