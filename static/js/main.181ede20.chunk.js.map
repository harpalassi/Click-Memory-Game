{"version":3,"sources":["components/Wrapper/index.js","components/Navbar/index.js","components/Header/index.js","components/CharacterCard/index.js","components/CardContainer/index.js","App.js","serviceWorker.js","index.js"],"names":["Wrapper","props","react_default","a","createElement","className","children","Navbar","state","label","score","topScore","this","Component","Header","CharacterCard","alt","name","src","image","onClick","id","CardContainer","characters","handleClick","console","log","_this2","map","character","components_CharacterCard","key","App","components_Wrapper","components_Navbar","components_Header","components_CardContainer","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8yDAOeA,MAJf,SAAiBC,GACf,OAAOC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAAWJ,EAAMK,WCoB1BC,oNApBbC,MAAQ,CACNC,MAAO,2BACPC,MAAO,EACPC,SAAU,2EAIV,OACET,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACbH,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,MAAIC,UAAU,SAAd,aACAH,EAAAC,EAAAC,cAAA,UAAKQ,KAAKJ,MAAMC,OAChBP,EAAAC,EAAAC,cAAA,oBACUQ,KAAKJ,MAAME,MADrB,mBAC4CE,KAAKJ,MAAMG,mBAd5CE,cCONC,MARf,SAAiBb,GACf,OAASC,EAAAC,EAAAC,cAAA,OAAKC,UAAW,UACrBH,EAAAC,EAAAC,cAAA,0BACAF,EAAAC,EAAAC,cAAA,6GCUSW,MAZf,SAAuBd,GACrB,OACEC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,OAAKY,IAAKf,EAAMgB,KAAMC,IAAKjB,EAAMkB,MAAOC,QAAS,kBAAMnB,EAAMmB,QAAQnB,EAAMoB,WC6BtEC,6MA7BXd,MAAQ,CACLe,gBAGHC,YAAc,SAACH,GACfI,QAAQC,IAAI,YAAaL,4EAGhB,IAAAM,EAAAf,KACT,OACIV,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACfH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,8BAEhBO,KAAKJ,MAAMe,WAAWK,IAAI,SAAAC,GAAS,OAChC3B,EAAAC,EAAAC,cAAC0B,EAAD,CACAT,GAAIQ,EAAUR,GACdJ,KAAMY,EAAUZ,KAChBc,IAAKF,EAAUZ,KACfE,MAAOU,EAAUV,MACjBC,QAASO,EAAKH,iBAElBtB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,qCAxBKQ,aCabmB,0LAVX,OACE9B,EAAAC,EAAAC,cAAC6B,EAAD,KACA/B,EAAAC,EAAAC,cAAC8B,EAAD,MACAhC,EAAAC,EAAAC,cAAC+B,EAAD,MACAjC,EAAAC,EAAAC,cAACgC,EAAD,cANYvB,cCKEwB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOzC,EAAAC,EAAAC,cAACwC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.181ede20.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\nfunction Wrapper(props) {\n  return <div className=\"wrapper\">{props.children}</div>;\n}\n\nexport default Wrapper;\n","import React, { Component } from \"react\";\nimport \"./style.css\";\n\nclass Navbar extends Component {\n  state = {\n    label: \"Click an image to begin!\",\n    score: 0,\n    topScore: 0\n  };\n\n  render() {\n    return (\n      <nav className=\"navbar\">\n        <ul>\n          <li className=\"title\">PEEP SHOW</li>\n          <li>{this.state.label}</li>\n          <li>\n            Score: {this.state.score}  |  Top Score: {this.state.topScore}\n          </li>\n        </ul>\n      </nav>\n    );\n  }\n}\nexport default Navbar;\n","import React from \"react\";\n\nfunction Header (props) {\n  return ( <div className =\"header\">\n      <h1>Clicky Game!</h1>\n      <h4>Click on an image to earn points, but don't click on any more than once!</h4>\n      </div>\n  )\n}\n\nexport default Header;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction CharacterCard(props) {\n  return (\n    <div>\n      <div className=\"col-sm-3\">\n        <div className=\"character\">\n          <img alt={props.name} src={props.image} onClick={() => props.onClick(props.id)} />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default CharacterCard;\n","import React, { Component } from \"react\";\nimport \"./style.css\";\nimport characters from '../../characters.json'\nimport CharacterCard from '../CharacterCard'\n\n\nclass CardContainer extends Component {\n\n    state = {\n       characters\n    }\n\n    handleClick = (id) => {\n    console.log(\"clicked #\", id)\n    }\n\n    render() {\n    return (\n        <div className=\"cards\">\n        <div className=\"container mt-3\">\n          <div className=\"row justify-content-center\">\n        \n        {this.state.characters.map(character =>\n            <CharacterCard \n            id={character.id}\n            name={character.name}\n            key={character.name}\n            image={character.image}\n            onClick={this.handleClick}/>)}\n        </div>\n        <div className=\"w-100 d-none d-md-block\"></div>\n        </div>\n        </div>\n    )\n}\n\n}\nexport default CardContainer;\n","import React, { Component } from 'react';\nimport Wrapper from './components/Wrapper';\nimport Navbar from './components/Navbar'\nimport Header from './components/Header'\nimport CardContainer from './components/CardContainer'\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <Wrapper>\n      <Navbar />\n      <Header />\n      <CardContainer />\n      </Wrapper>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}